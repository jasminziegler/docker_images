### Multistage build
## Stage 1: GPU stuff
FROM nvidia/cuda:10.2-devel-ubuntu18.04

### Install GPU-support here
# GPU stuff adapted from 
# https://gitlab.com/nvidia/container-images/cuda/blob/master/dist/ubuntu16.04/10.2/base/Dockerfile
# https://gitlab.com/nvidia/container-images/cuda/blob/master/dist/ubuntu18.04/10.2/base/Dockerfile
# https://gitlab.com/nvidia/container-images/cuda/blob/master/dist/ubuntu18.04/10.2/runtime/Dockerfile
# https://github.com/microsoft/LightGBM/blob/master/docker/gpu/dockerfile.gpu
# https://hub.docker.com/r/rocker/cuda/dockerfile

## Stage 2: R stuff
FROM rocker/verse:3.6.1

# update environment variables 
ENV CUDA_HOME /usr/local/cuda
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
ENV PATH ${CUDA_HOME}/bin:${PATH}

# Update where R expects to find various Java files
RUN R CMD javareconf

# copy GPU stuff from stage 1: we want to have GPU-support in our final R container
COPY --from=0 ${CUDA_HOME}-10.2 ${CUDA_HOME}-10.2
COPY --from=0 /usr/include/nccl.h /usr/include/nccl.h
COPY --from=0 /usr/lib/x86_64-linux-gnu/libnccl* /usr/lib/x86_64-linux-gnu/
RUN ln -s ${CUDA_HOME}-10.2 ${CUDA_HOME}

# install latest cmake (> 3.12 required for compiling of latest xgboost)
RUN wget -O cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.15.2/cmake-3.15.2.tar.gz && \
    tar -zxvf cmake.tar.gz && \
    mv cmake-* cmake/ && \
    cd cmake && \
    ./bootstrap && \
    make && \
    make install
RUN rm -rf cmake && rm -rf cmake.tar.gz

RUN git clone --recursive -b v0.90 https://github.com/dmlc/xgboost && \
    mkdir -p xgboost/build && \
    cd xgboost/build && \
    cmake .. -DUSE_CUDA=ON -DR_LIB=ON -DUSE_NCCL=ON && \
    make install -j$(nproc)
RUN rm -rf xgboost

# install lightgbm GPU
# https://lightgbm.readthedocs.io/en/latest/GPU-Tutorial.html
ENV OPENCL_LIBRARIES /usr/local/cuda/lib64
ENV OPENCL_INCLUDE_DIR /usr/local/cuda/include

# Add OpenCL ICD files for LightGBM
RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

RUN apt-get update && \
apt-get install -y --no-install-recommends \
    libboost-dev \
    libboost-system-dev \
    libboost-filesystem-dev
RUN rm -rf /var/lib/apt/lists/*

# Install lightgbm
RUN git clone --recursive --branch stable --depth 1 https://github.com/microsoft/LightGBM && \
    cd LightGBM && \
    mkdir build && \
    cd build && \
    cmake -DUSE_GPU=ON -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
    make OPENCL_HEADERS=/usr/local/${CUDA_HOME}/targets/x86_64-linux/include LIBOPENCL=/usr/local/${CUDA_HOME}/targets/x86_64-linux/lib

# Install lightgbm python package
RUN cd LightGBM/python-package && \
    python setup.py install --precompile

# Install  R package 
RUN cd LightGBM && \
    sed -i -e 's/use_gpu <- FALSE/use_gpu <- TRUE/g' R-package/src/install.libs.R && \
    # R_PACKAGE_SOURCE <- "\/LightGBM\/R-package\/" is necessary, because the default settings are searching in some temp folder for the precompiled lib_lightgbm.so
    sed -i -e 's/use_precompile <- FALSE/use_precompile <- TRUE; R_PACKAGE_SOURCE <- "\/LightGBM\/R-package\/";/g' R-package/src/install.libs.R && \
    Rscript build_r.R
RUN rm -rf LightGBM

# Entry
# compile: docker build -f Dockerfile.gpu -t dockergpu .
# docker run --gpus all -p 8787:8787 -e PASSWORD=password dockergpu 
